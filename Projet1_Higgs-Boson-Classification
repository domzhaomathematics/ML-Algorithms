{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Projet1_","version":"0.3.2","provenance":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"whT86Sr_cy1z","colab_type":"code","outputId":"be92cbe0-be22-478e-8da3-b3fe21ca0e88","executionInfo":{"status":"ok","timestamp":1565024538066,"user_tz":-120,"elapsed":771,"user":{"displayName":"Dominic Zhao","photoUrl":"","userId":"13142109890950216893"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import io\n","\n","%matplotlib inline \n","print(\"Ok\")"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Ok\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OcADfWg1eBuQ","colab_type":"text"},"source":["# Load data"]},{"cell_type":"code","metadata":{"id":"vznuJqLNdy_s","colab_type":"code","outputId":"caf83b2d-45a5-4825-cc5e-069d6c50444a","executionInfo":{"status":"ok","timestamp":1565008996896,"user_tz":-120,"elapsed":722,"user":{"displayName":"Dominic Zhao","photoUrl":"","userId":"13142109890950216893"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","#4/nQHCYB1AO4khAWQNQzkUZjsM2j5TQK6DpxfmS4OtPt8Al0zBvkUIO4o"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vN6308J1f5KH","colab_type":"code","outputId":"b0ef4f57-8006-4274-c410-e75e9fd02f06","executionInfo":{"status":"ok","timestamp":1565024547993,"user_tz":-120,"elapsed":6926,"user":{"displayName":"Dominic Zhao","photoUrl":"","userId":"13142109890950216893"}},"colab":{"base_uri":"https://localhost:8080/","height":155}},"source":["path_test=\"/content/drive/My Drive/Higgs_data/test.csv\"\n","path_train=\"/content/drive/My Drive/Higgs_data/train.csv\"\n","test=pd.read_csv(path_test)\n","train=pd.read_csv(path_train)\n","\n","\n","#to see properly all the columns\n","pd.set_option('display.max_columns', None)  \n","pd.set_option('display.expand_frame_repr', False)\n","pd.set_option('max_colwidth', -1)\n","\n","print(train.head())\n","print(train.shape)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["       Id Prediction  DER_mass_MMC  DER_mass_transverse_met_lep  DER_mass_vis  DER_pt_h  DER_deltaeta_jet_jet  DER_mass_jet_jet  DER_prodeta_jet_jet  DER_deltar_tau_lep  DER_pt_tot  DER_sum_pt  DER_pt_ratio_lep_tau  DER_met_phi_centrality  DER_lep_eta_centrality  PRI_tau_pt  PRI_tau_eta  PRI_tau_phi  PRI_lep_pt  PRI_lep_eta  PRI_lep_phi  PRI_met  PRI_met_phi  PRI_met_sumet  PRI_jet_num  PRI_jet_leading_pt  PRI_jet_leading_eta  PRI_jet_leading_phi  PRI_jet_subleading_pt  PRI_jet_subleading_eta  PRI_jet_subleading_phi  PRI_jet_all_pt\n","0  100000  s          138.470       51.655                       97.827        27.980    0.91                  124.711           2.666                3.064               41.928      197.760     1.582                 1.396                   0.2                     32.638      1.017        0.381        51.626      2.273       -2.414        16.824  -0.277        258.733        2            67.435              2.150                0.444                46.062                 1.24                   -2.475                   113.497       \n","1  100001  b          160.937       68.768                       103.235       48.146   -999.00               -999.000          -999.000              3.473               2.078       125.157     0.879                 1.414                  -999.0                   42.014      2.039       -3.011        36.918      0.501        0.103        44.704  -1.916        164.546        1            46.226              0.725                1.158               -999.000               -999.00                 -999.000                 46.226        \n","2  100002  b         -999.000       162.172                      125.953       35.635   -999.00               -999.000          -999.000              3.148               9.336       197.814     3.776                 1.414                  -999.0                   32.154     -0.705       -2.093        121.409    -0.953        1.052        54.283  -2.186        260.414        1            44.251              2.053               -2.028               -999.000               -999.00                 -999.000                 44.251        \n","3  100003  b          143.905       81.417                       80.943        0.414    -999.00               -999.000          -999.000              3.310               0.414       75.968      2.354                -1.285                  -999.0                   22.647     -1.655        0.010        53.321     -0.522       -3.100        31.082   0.060        86.062         0           -999.000            -999.000             -999.000             -999.000               -999.00                 -999.000                 0.000         \n","4  100004  b          175.864       16.915                       134.805       16.405   -999.00               -999.000          -999.000              3.891               16.405      57.983      1.056                -1.385                  -999.0                   28.209     -2.197       -2.231        29.774      0.798        1.569        2.723   -0.871        53.131         0           -999.000            -999.000             -999.000             -999.000               -999.00                 -999.000                 0.000         \n","(250000, 32)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dvekAkrZc_48","colab_type":"code","colab":{}},"source":["#from google.colab import files\n","#uploaded = files.upload()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6iTkEm_JCG8w","colab_type":"code","outputId":"12ba975a-152f-4f71-b439-f57e8b3d9c22","executionInfo":{"status":"ok","timestamp":1565024268376,"user_tz":-120,"elapsed":3201,"user":{"displayName":"Dominic Zhao","photoUrl":"","userId":"13142109890950216893"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["'''test = pd.read_csv(io.BytesIO(uploaded['test.csv']))\n","train=pd.read_csv(io.BytesIO(uploaded['train.csv']))\n","\n","#to see properly all the columns\n","pd.set_option('display.max_columns', None)  \n","pd.set_option('display.expand_frame_repr', False)\n","pd.set_option('max_colwidth', -1)\n","\n","print(train.head())\n","print(train.shape)\n","'''"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"test = pd.read_csv(io.BytesIO(uploaded['test.csv']))\\ntrain=pd.read_csv(io.BytesIO(uploaded['train.csv']))\\n\\n#to see properly all the columns\\npd.set_option('display.max_columns', None)  \\npd.set_option('display.expand_frame_repr', False)\\npd.set_option('max_colwidth', -1)\\n\\nprint(train.head())\\nprint(train.shape)\\n\""]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"IYx45tRb6CVg","colab_type":"text"},"source":["## **Function implementation**"]},{"cell_type":"markdown","metadata":{"id":"1CfuyOQ1-ZW2","colab_type":"text"},"source":["Lost, preparing for trainning and more"]},{"cell_type":"code","metadata":{"id":"W_6ev8b-5r1Y","colab_type":"code","colab":{}},"source":["def standardize(x):\n","  #standardize\n","  #transform to train with regression\n","  mean_x=np.mean(x)\n","  x-=mean_x\n","  std_x=np.std(x)\n","  x=x/std_x\n","  \n","  return x"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oPoeN6ct7mC5","colab_type":"code","colab":{}},"source":["def transform_x(x):\n","  tx=np.c_[np.ones(x.shape[0]),x]\n","  return tx"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7KD95-R778V3","colab_type":"code","colab":{}},"source":["def mse(y,tx,w):\n","  e=y-tx.dot(w)\n","  mse=(1/2)*np.mean(e**2)\n","  return mse"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Tbm_DE5D84VR","colab_type":"code","colab":{}},"source":["def rmse(y,tx,w):\n","  return np.sqrt(2*mse(t,tx,w))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9YQqJdVf9OSr","colab_type":"code","colab":{}},"source":["def build_poly(tx,degree):\n","  #building polynomials feature for non-linear regression, without the kernel, trick, so only for small degrees\n","  return phi_tx"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2lg4UiAlF1tV","colab_type":"code","colab":{}},"source":["def build_k_indices(y, k_fold, seed):\n","    \"\"\"build k indices for k-fold.\"\"\"\n","    num_row = y.shape[0]\n","    interval = int(num_row / k_fold)\n","    np.random.seed(seed)\n","    indices = np.random.permutation(num_row)\n","    k_indices = [indices[k * interval: (k + 1) * interval]\n","                 for k in range(k_fold)]\n","    return np.array(k_indices)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"pofhbCQeF2-w","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"95dL_3Gh-g6G","colab_type":"text"},"source":["**Training methods**"]},{"cell_type":"code","metadata":{"id":"AtE_T35c-JhQ","colab_type":"code","colab":{}},"source":["def least_squares(y,tx):\n","  a=tx.T.dot(tx)\n","  b=tx.T.dot(y)\n","  \n","  return np.linalg.solve(a,b)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FoT4QzxsFAEj","colab_type":"code","colab":{}},"source":["def ridge_regression(y,tx,lambda_):\n","  #ridge regression for mse lost function\n","  a=tx.T.dot(tx)+lambda_*2*len(y)*np.identity(tx.shape[1])\n","  b=tx.T.dot(y)\n","    \n","  return np.linalg.solve(a,b)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kYT7q5sMRnjb","colab_type":"text"},"source":["Methods for logistic regression"]},{"cell_type":"code","metadata":{"id":"uuWuD_jZZ-Dy","colab_type":"code","colab":{}},"source":["def calculate_hessian(y, tx, w):\n","  S=np.zeros((y.size,y.size))\n","  for i in range(y.size):\n","    S[i][i]=sigmoid((tx[i]).T.dot(w))*(1-sigmoid((tx[i]).T.dot(w)))\n","  return tx.T.dot(S).dot(tx)\n","  \n","  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8wc-S4WUFVJ9","colab_type":"code","colab":{}},"source":[" def sigmoid(t):\n","  return np.exp(t)/(1+np.exp(t))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_wvwKlWgRu70","colab_type":"code","colab":{}},"source":["def calculate_loss(y, tx, w):\n","  #loss=np.sum(np.log(np.ones(y.size)+np.exp(tx.dot(w)))-tx.dot(w).dot(y.T))\n","  pred = sigmoid(tx.dot(w))\n","  #loss = y.T.dot(np.log(pred)) + (1 - y).T.dot(np.log(1 - pred))\n","  loss=np.sum(np.log(1+np.exp(tx.dot(w))))-y.T.dot(tx.dot(w))\n","  return loss\n","\n","  #return loss"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nZ5ux2VkRu2O","colab_type":"code","colab":{}},"source":["def penalized_logistic_regression(y, tx, w, lambda_):\n","  loss=calculate_loss(y,tx,w)+lambda_*0.5*(w.T.dot(w))\n","  gradient=tx.T.dot(sigmoid(tx.dot(w))-y)+lambda_*w\n","  hessian=calculate_hessian(y,tx,w)+2*np.identity(w.size)\n","  \n","  return loss,gradient,hessian\n"," "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5aujaeSCRu4g","colab_type":"code","colab":{}},"source":["def logistic_learning_by_gradient_descent(y, tx, w, gamma):\n","  gradient=tx.T.dot(sigmoid(tx.dot(w))-y)\n","  w=w-gamma*gradient\n","  loss=calculate_loss(y,tx,w)\n","  return loss, w"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yEe4GyBpCnm7","colab_type":"code","colab":{}},"source":["def logistic_learning_by_gradient_descent_penalized(y, tx, w, gamma,lambda_):\n","  gradient=tx.T.dot(sigmoid(tx.dot(w))-y)+lambda_*w\n","  w=w-gamma*gradient\n","  loss=calculate_loss(y,tx,w)+lambda_*0.5*(w.T.dot(w))\n","  return loss, w"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R1WEZYM-DFAZ","colab_type":"code","colab":{}},"source":["def calculate_loss_penalized(y, tx, w):\n","  #loss=np.sum(np.log(np.ones(y.size)+np.exp(tx.dot(w)))-tx.dot(w).dot(y.T))\n","  pred = sigmoid(tx.dot(w))\n","  #loss = y.T.dot(np.log(pred)) + (1 - y).T.dot(np.log(1 - pred))\n","  loss=np.sum(np.log(1+np.exp(tx.dot(w))))-y.T.dot(tx.dot(w))+lambda_*0.5*(w.T.dot(w))\n","  return loss\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eOeCTMuORuzl","colab_type":"code","colab":{}},"source":["def logistic_learning_by_penalized_gradient(y, tx, w, gamma, lambda_):\n","  loss,gradient,hessian=penalized_logistic_regression(y,tx,w,lambda_)\n","  w-=gamma*((np.linalg.inv(hessian)).dot(gradient))\n","    \n","  return loss, w"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fzUCwQskTCEV","colab_type":"code","colab":{}},"source":["def boolean_prediction_with_logistic_regression(tx,w):\n","  #The probability of getting 1 is by definition, definition of logistic regression, the function below. If the probability exceed 0.5 , we predict one.  \n","  proba_1=sigmoid(tx.dot(w))\n","  y_predictions=[]\n","  for p in proba_1:\n","    if p>=0.5:\n","      y_predictions.append(1)\n","    else:\n","      y_predictions.append(0)\n","  return y_predictions "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FgAzF7DpWN_v","colab_type":"code","colab":{}},"source":["def hit_mark(y_predictions,y):\n","  \n","  #Postive prediction percentage\n","  hit_mark=0\n","  for i,y_value in enumerate(y):\n","    if y_value==y_predictions[i]:\n","      hit_mark+=1\n","  \n","  return hit_mark\n"," \n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1V1AZbq5GkwW","colab_type":"text"},"source":["**Cross validation and hyperparameter tunning**"]},{"cell_type":"code","metadata":{"id":"DhYk041BGoLW","colab_type":"code","colab":{}},"source":["def cross_validation_ridge(data,k_indices,lambda_,degree):\n","  #for ridge regression\n","  rmse_te_temp=[] #rmse on test\n","  rmse_tr_temp #rmse on train set\n","  for k in k_indices:\n","    k_train=np.delete(k_indices,np.where(k_indices==k))\n","    train=data.iloc[k_train,:]\n","    test=data.iloc[k,:]\n","    x_train=train.iloc[:,1:]\n","    y_train=train.iloc[:,0]\n","    tx_train=transform_x(x)\n","    \n","    #getting the optimal coefficients\n","    w=ridge_regression(y_train,tx_train,lambda_)\n","    \n","    #Calculating rmse for this fold\n","    x_test=test.iloc[:,1:]\n","    y_test=test.iloc[:.0]\n","    tx_train=transform_x(x)\n","    \n","    rmse_te_temp.append(rmse(y_test,tx_test,w))\n","    rmse_tr_temp.append(rmse(y_train,tx_train,w))\n","  return np.mean(rmse_te_temp) ,np.mean(rmse_tr_temp)\n"," \n","   \n","  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OUbFi6TxQazR","colab_type":"code","colab":{}},"source":["def cross_validation_logistic(data,k_indices,gamma):\n","  \n","  hit_te_temp=[] #loss on test\n","  hit_tr_temp=[] #loss on train set\n","  iterations=500\n","  w=np.random.rand(data.shape[1])\n","  for k in k_indices:\n","    k_train=np.delete(k_indices,np.where(k_indices==k))\n","    train=data.iloc[k_train,:]\n","    test=data.iloc[k,:]\n","    x_train=train.iloc[:,1:]\n","    x_train=standardize(x_train)\n","    y_train=train.iloc[:,0]\n","    tx_train=transform_x(x)\n","    #getting the optimal coefficients\n","    for i in range(iterations):\n","      loss,w=logistic_learning_by_gradient_descent(y, tx, w, gamma)\n","    \n","    #Getting the test and train hit mark\n","    x_test=test.iloc[:,1:]\n","    x_test=standardize(x_test)\n","    y_test=test.iloc[:,0]\n","    tx_test=transform_x(x_test)\n","    y_predictions_train=sigmoid(tx_train.dot(w))\n","    y_predictions_test=sigmoid(tx_test.dot(w))\n","    \n","    predictions_boolean_train=[]\n","    for pred in y_predictions_train:\n","      if pred>=(0.5):\n","        predictions_boolean_train.append(y[1])\n","      else:\n","        predictions_boolean_train.append(y[0])\n","   \n","    predictions_boolean_test=[]\n","    for pred in y_predictions_test:\n","      if pred>=(0.5):\n","        predictions_boolean_test.append(y[1])\n","      else:\n","        predictions_boolean_test.append(y[0])\n","    \n","    \n","    hit_mark_train=hit_mark(predictions_boolean_train,y_train)\n","    hit_mark_test=hit_mark(predictions_boolean_test,y_test)\n","    \n","    hit_te_temp.append(hit_mark_test/y_test.shape[0])\n","    hit_tr_temp.append(hit_mark_train/y_train.shape[0])\n","    \n","    print(\"one fold\")\n","   \n","  return np.mean(hit_te_temp) ,np.mean(hit_tr_temp)\n"," \n","  \n","  #instead of validating for a loss function, it's better to cross_validate for the hit_mark for each hyperparameter"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"t_l9yOHm21MA","colab_type":"code","colab":{}},"source":["def cross_validation_logistic_penalized(data,k_indices,gamma,lambda_):\n","  hit_te_temp=[] #loss on test\n","  hit_tr_temp=[] #loss on train set\n","  iterations=500\n","  w=np.random.rand(data.shape[1])\n","  for k in k_indices:\n","    k_train=np.delete(k_indices,np.where(k_indices==k))\n","    train=data.iloc[k_train,:]\n","    test=data.iloc[k,:]\n","    x_train=train.iloc[:,1:]\n","    x_train=standardize(x_train)\n","    y_train=train.iloc[:,0]\n","    tx_train=transform_x(x)\n","    #getting the optimal coefficients\n","    for i in range(iterations):\n","      loss,w=logistic_learning_by_gradient_descent_penalized(y, tx, w, gamma,lambda_)\n","    \n","    #Getting the test and train hit mark\n","    x_test=test.iloc[:,1:]\n","    x_test=standardize(x_test)\n","    y_test=test.iloc[:,0]\n","    tx_test=transform_x(x_test)\n","    y_predictions_train=sigmoid(tx_train.dot(w))\n","    y_predictions_test=sigmoid(tx_test.dot(w))\n","    \n","    predictions_boolean_train=[]\n","    for pred in y_predictions_train:\n","      if pred>=(0.5):\n","        predictions_boolean_train.append(y[1])\n","      else:\n","        predictions_boolean_train.append(y[0])\n","   \n","    predictions_boolean_test=[]\n","    for pred in y_predictions_test:\n","      if pred>=(0.5):\n","        predictions_boolean_test.append(y[1])\n","      else:\n","        predictions_boolean_test.append(y[0])\n","    \n","    \n","    hit_mark_train=hit_mark(predictions_boolean_train,y_train)\n","    hit_mark_test=hit_mark(predictions_boolean_test,y_test)\n","    \n","    hit_te_temp.append(hit_mark_test/y_test.shape[0])\n","    hit_tr_temp.append(hit_mark_train/y_train.shape[0])\n","    \n","    print(\"one fold\")\n","   \n","  return np.mean(hit_te_temp) ,np.mean(hit_tr_temp)\n"," \n","  \n","  #instead of validating for a loss function, it's better to cross_validate for the hit_mark for each hyperparameter"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"pe-eHxFfVwXR","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UtiG3GiWGueG","colab_type":"text"},"source":["## **Data Exploration and feature engineering**"]},{"cell_type":"code","metadata":{"id":"gimWRAzuQySx","colab_type":"code","colab":{}},"source":["train=train.drop('Id',axis=1)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dLjsapXmSnaO","colab_type":"code","colab":{}},"source":["train=train.replace(-999.000,np.nan)\n","train=train.fillna(train.mean())\n","#Replacing the -999 by the average, since it would be too much to drop everything"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q3HIoxnkT7Qu","colab_type":"code","outputId":"a5b68214-84f0-4558-8d7b-d5e520dc223a","executionInfo":{"status":"ok","timestamp":1565024583108,"user_tz":-120,"elapsed":3200,"user":{"displayName":"Dominic Zhao","photoUrl":"","userId":"13142109890950216893"}},"colab":{"base_uri":"https://localhost:8080/","height":221}},"source":["train.head()"],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Prediction</th>\n","      <th>DER_mass_MMC</th>\n","      <th>DER_mass_transverse_met_lep</th>\n","      <th>DER_mass_vis</th>\n","      <th>DER_pt_h</th>\n","      <th>DER_deltaeta_jet_jet</th>\n","      <th>DER_mass_jet_jet</th>\n","      <th>DER_prodeta_jet_jet</th>\n","      <th>DER_deltar_tau_lep</th>\n","      <th>DER_pt_tot</th>\n","      <th>DER_sum_pt</th>\n","      <th>DER_pt_ratio_lep_tau</th>\n","      <th>DER_met_phi_centrality</th>\n","      <th>DER_lep_eta_centrality</th>\n","      <th>PRI_tau_pt</th>\n","      <th>PRI_tau_eta</th>\n","      <th>PRI_tau_phi</th>\n","      <th>PRI_lep_pt</th>\n","      <th>PRI_lep_eta</th>\n","      <th>PRI_lep_phi</th>\n","      <th>PRI_met</th>\n","      <th>PRI_met_phi</th>\n","      <th>PRI_met_sumet</th>\n","      <th>PRI_jet_num</th>\n","      <th>PRI_jet_leading_pt</th>\n","      <th>PRI_jet_leading_eta</th>\n","      <th>PRI_jet_leading_phi</th>\n","      <th>PRI_jet_subleading_pt</th>\n","      <th>PRI_jet_subleading_eta</th>\n","      <th>PRI_jet_subleading_phi</th>\n","      <th>PRI_jet_all_pt</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>s</td>\n","      <td>138.470000</td>\n","      <td>51.655</td>\n","      <td>97.827</td>\n","      <td>27.980</td>\n","      <td>0.910000</td>\n","      <td>124.71100</td>\n","      <td>2.666000</td>\n","      <td>3.064</td>\n","      <td>41.928</td>\n","      <td>197.760</td>\n","      <td>1.582</td>\n","      <td>1.396</td>\n","      <td>0.20000</td>\n","      <td>32.638</td>\n","      <td>1.017</td>\n","      <td>0.381</td>\n","      <td>51.626</td>\n","      <td>2.273</td>\n","      <td>-2.414</td>\n","      <td>16.824</td>\n","      <td>-0.277</td>\n","      <td>258.733</td>\n","      <td>2</td>\n","      <td>67.435000</td>\n","      <td>2.150000</td>\n","      <td>0.444000</td>\n","      <td>46.062000</td>\n","      <td>1.240000</td>\n","      <td>-2.475000</td>\n","      <td>113.497</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>b</td>\n","      <td>160.937000</td>\n","      <td>68.768</td>\n","      <td>103.235</td>\n","      <td>48.146</td>\n","      <td>2.403735</td>\n","      <td>371.78336</td>\n","      <td>-0.821688</td>\n","      <td>3.473</td>\n","      <td>2.078</td>\n","      <td>125.157</td>\n","      <td>0.879</td>\n","      <td>1.414</td>\n","      <td>0.45829</td>\n","      <td>42.014</td>\n","      <td>2.039</td>\n","      <td>-3.011</td>\n","      <td>36.918</td>\n","      <td>0.501</td>\n","      <td>0.103</td>\n","      <td>44.704</td>\n","      <td>-1.916</td>\n","      <td>164.546</td>\n","      <td>1</td>\n","      <td>46.226000</td>\n","      <td>0.725000</td>\n","      <td>1.158000</td>\n","      <td>57.679474</td>\n","      <td>-0.011845</td>\n","      <td>-0.001582</td>\n","      <td>46.226</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>b</td>\n","      <td>121.858528</td>\n","      <td>162.172</td>\n","      <td>125.953</td>\n","      <td>35.635</td>\n","      <td>2.403735</td>\n","      <td>371.78336</td>\n","      <td>-0.821688</td>\n","      <td>3.148</td>\n","      <td>9.336</td>\n","      <td>197.814</td>\n","      <td>3.776</td>\n","      <td>1.414</td>\n","      <td>0.45829</td>\n","      <td>32.154</td>\n","      <td>-0.705</td>\n","      <td>-2.093</td>\n","      <td>121.409</td>\n","      <td>-0.953</td>\n","      <td>1.052</td>\n","      <td>54.283</td>\n","      <td>-2.186</td>\n","      <td>260.414</td>\n","      <td>1</td>\n","      <td>44.251000</td>\n","      <td>2.053000</td>\n","      <td>-2.028000</td>\n","      <td>57.679474</td>\n","      <td>-0.011845</td>\n","      <td>-0.001582</td>\n","      <td>44.251</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>b</td>\n","      <td>143.905000</td>\n","      <td>81.417</td>\n","      <td>80.943</td>\n","      <td>0.414</td>\n","      <td>2.403735</td>\n","      <td>371.78336</td>\n","      <td>-0.821688</td>\n","      <td>3.310</td>\n","      <td>0.414</td>\n","      <td>75.968</td>\n","      <td>2.354</td>\n","      <td>-1.285</td>\n","      <td>0.45829</td>\n","      <td>22.647</td>\n","      <td>-1.655</td>\n","      <td>0.010</td>\n","      <td>53.321</td>\n","      <td>-0.522</td>\n","      <td>-3.100</td>\n","      <td>31.082</td>\n","      <td>0.060</td>\n","      <td>86.062</td>\n","      <td>0</td>\n","      <td>84.822105</td>\n","      <td>-0.003275</td>\n","      <td>-0.012393</td>\n","      <td>57.679474</td>\n","      <td>-0.011845</td>\n","      <td>-0.001582</td>\n","      <td>0.000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>b</td>\n","      <td>175.864000</td>\n","      <td>16.915</td>\n","      <td>134.805</td>\n","      <td>16.405</td>\n","      <td>2.403735</td>\n","      <td>371.78336</td>\n","      <td>-0.821688</td>\n","      <td>3.891</td>\n","      <td>16.405</td>\n","      <td>57.983</td>\n","      <td>1.056</td>\n","      <td>-1.385</td>\n","      <td>0.45829</td>\n","      <td>28.209</td>\n","      <td>-2.197</td>\n","      <td>-2.231</td>\n","      <td>29.774</td>\n","      <td>0.798</td>\n","      <td>1.569</td>\n","      <td>2.723</td>\n","      <td>-0.871</td>\n","      <td>53.131</td>\n","      <td>0</td>\n","      <td>84.822105</td>\n","      <td>-0.003275</td>\n","      <td>-0.012393</td>\n","      <td>57.679474</td>\n","      <td>-0.011845</td>\n","      <td>-0.001582</td>\n","      <td>0.000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Prediction  DER_mass_MMC  DER_mass_transverse_met_lep  DER_mass_vis  DER_pt_h  DER_deltaeta_jet_jet  DER_mass_jet_jet  DER_prodeta_jet_jet  DER_deltar_tau_lep  DER_pt_tot  DER_sum_pt  DER_pt_ratio_lep_tau  DER_met_phi_centrality  DER_lep_eta_centrality  PRI_tau_pt  PRI_tau_eta  PRI_tau_phi  PRI_lep_pt  PRI_lep_eta  PRI_lep_phi  PRI_met  PRI_met_phi  PRI_met_sumet  PRI_jet_num  PRI_jet_leading_pt  PRI_jet_leading_eta  PRI_jet_leading_phi  PRI_jet_subleading_pt  PRI_jet_subleading_eta  PRI_jet_subleading_phi  PRI_jet_all_pt\n","0  s          138.470000    51.655                       97.827        27.980    0.910000              124.71100         2.666000             3.064               41.928      197.760     1.582                 1.396                   0.20000                 32.638      1.017        0.381        51.626      2.273       -2.414        16.824  -0.277        258.733        2            67.435000           2.150000             0.444000             46.062000              1.240000               -2.475000                113.497       \n","1  b          160.937000    68.768                       103.235       48.146    2.403735              371.78336        -0.821688             3.473               2.078       125.157     0.879                 1.414                   0.45829                 42.014      2.039       -3.011        36.918      0.501        0.103        44.704  -1.916        164.546        1            46.226000           0.725000             1.158000             57.679474             -0.011845               -0.001582                46.226        \n","2  b          121.858528    162.172                      125.953       35.635    2.403735              371.78336        -0.821688             3.148               9.336       197.814     3.776                 1.414                   0.45829                 32.154     -0.705       -2.093        121.409    -0.953        1.052        54.283  -2.186        260.414        1            44.251000           2.053000            -2.028000             57.679474             -0.011845               -0.001582                44.251        \n","3  b          143.905000    81.417                       80.943        0.414     2.403735              371.78336        -0.821688             3.310               0.414       75.968      2.354                -1.285                   0.45829                 22.647     -1.655        0.010        53.321     -0.522       -3.100        31.082   0.060        86.062         0            84.822105          -0.003275            -0.012393             57.679474             -0.011845               -0.001582                0.000         \n","4  b          175.864000    16.915                       134.805       16.405    2.403735              371.78336        -0.821688             3.891               16.405      57.983      1.056                -1.385                   0.45829                 28.209     -2.197       -2.231        29.774      0.798        1.569        2.723   -0.871        53.131         0            84.822105          -0.003275            -0.012393             57.679474             -0.011845               -0.001582                0.000         "]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"r-s3JSepUv9p","colab_type":"text"},"source":["**Load data**"]},{"cell_type":"code","metadata":{"id":"ZDmyoGKAURcb","colab_type":"code","outputId":"56178207-35e1-42ad-cf69-5eb4d0130a47","executionInfo":{"status":"ok","timestamp":1565024584343,"user_tz":-120,"elapsed":985,"user":{"displayName":"Dominic Zhao","photoUrl":"","userId":"13142109890950216893"}},"colab":{"base_uri":"https://localhost:8080/","height":945}},"source":["y=train.iloc[:,0]\n","x=train.iloc[:,1:]\n","x=standardize(x)\n","tx=transform_x(x)\n","tx[:5,:]\n"],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 1.00000000e+00,  3.14910656e-01,  6.83319669e-02,\n","         4.07680272e-01, -4.69966242e-01, -1.59163777e+00,\n","        -1.15330600e+00,  1.80634634e+00,  8.82477616e-01,\n","         1.03309853e+00,  3.39894409e-01,  1.70928751e-01,\n","         1.27708372e+00, -1.20269796e+00, -2.70810701e-01,\n","         8.46712120e-01,  2.14211673e-01,  2.25054165e-01,\n","         1.81228807e+00, -1.35281991e+00, -7.56756847e-01,\n","        -1.47267409e-01,  3.86846731e-01,  1.04440205e+00,\n","        -3.69920566e-01,  1.55729751e+00,  3.24824359e-01,\n","        -6.74264040e-01,  1.14381874e+00, -2.52714288e+00,\n","         4.12510497e-01],\n","       [ 1.00000000e+00,  7.40827026e-01,  5.52504823e-01,\n","         5.40136414e-01, -1.53167493e-01, -7.22901244e-12,\n","        -6.30497792e-12,  6.75116455e-13,  1.40488790e+00,\n","        -7.56027155e-01, -2.87584486e-01, -6.61278739e-01,\n","         1.29216437e+00,  5.54701409e-13,  1.47535944e-01,\n","         1.68850441e+00, -1.65284897e+00, -4.41525538e-01,\n","         4.11474984e-01,  3.27297073e-02,  9.07979726e-02,\n","        -1.05168345e+00, -3.57718932e-01,  2.13049736e-02,\n","        -8.21154138e-01,  5.26704866e-01,  8.32993155e-01,\n","        -8.40286544e-12,  2.27625804e-14, -9.07182551e-15,\n","        -2.73819964e-01],\n","       [ 1.00000000e+00, -1.00190288e-12,  3.19515553e+00,\n","         1.09655998e+00, -3.49709651e-01, -7.22901244e-12,\n","        -6.30497792e-12,  6.75116455e-13,  9.89769704e-01,\n","        -4.30168330e-01,  3.40361109e-01,  2.76817375e+00,\n","         1.29216437e+00,  5.54701409e-13, -2.92406240e-01,\n","        -5.71650232e-01, -1.14755367e+00,  3.38768208e+00,\n","        -7.37950650e-01,  5.55132005e-01,  3.82000541e-01,\n","        -1.20067206e+00,  4.00135347e-01,  2.13049736e-02,\n","        -8.63173389e-01,  1.48714489e+00, -1.43454996e+00,\n","        -8.40286544e-12,  2.27625804e-14, -9.07182551e-15,\n","        -2.93969845e-01],\n","       [ 1.00000000e+00,  4.17944237e-01,  9.10379098e-01,\n","        -5.85328814e-03, -9.03015649e-01, -7.22901244e-12,\n","        -6.30497792e-12,  6.75116455e-13,  1.19669016e+00,\n","        -8.30734938e-01, -7.12705477e-01,  1.08481806e+00,\n","        -9.69095426e-01,  5.54701409e-13, -7.16597958e-01,\n","        -1.35413817e+00,  1.00019143e-02,  3.01873079e-01,\n","        -3.97233698e-01, -1.73044686e+00, -3.23312205e-01,\n","         3.86924478e-02, -9.78149475e-01, -1.00179211e+00,\n","         2.89464183e-12, -4.09122373e-15,  2.69324180e-14,\n","        -8.40286544e-12,  2.27625804e-14, -9.07182551e-15,\n","        -7.45439413e-01],\n","       [ 1.00000000e+00,  1.02380444e+00, -9.14556190e-01,\n","         1.31336873e+00, -6.51804263e-01, -7.22901244e-12,\n","        -6.30497792e-12,  6.75116455e-13,  1.93879376e+00,\n","        -1.12794943e-01, -8.68142689e-01, -4.51747123e-01,\n","        -1.05287682e+00,  5.54701409e-13, -4.68427732e-01,\n","        -1.80056814e+00, -1.22351309e+00, -7.65298002e-01,\n","         6.46261375e-01,  8.39728410e-01, -1.18542867e+00,\n","        -4.75042349e-01, -1.23847512e+00, -1.00179211e+00,\n","         2.89464183e-12, -4.09122373e-15,  2.69324180e-14,\n","        -8.40286544e-12,  2.27625804e-14, -9.07182551e-15,\n","        -7.45439413e-01]])"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"markdown","metadata":{"id":"CAQH3E3PUZAr","colab_type":"text"},"source":["**Try predicting with logistic regression we define b as 1 and s as 0**"]},{"cell_type":"code","metadata":{"id":"galuOjLnX_k_","colab_type":"code","outputId":"7994ac1b-a2c6-4e51-fcc0-237392b35d12","executionInfo":{"status":"ok","timestamp":1565024589952,"user_tz":-120,"elapsed":743,"user":{"displayName":"Dominic Zhao","photoUrl":"","userId":"13142109890950216893"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["tx.shape"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(250000, 31)"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"R5GHjxusVzkG","colab_type":"code","outputId":"19a2d1cc-53c3-442e-e9e5-d42300ba0571","executionInfo":{"status":"ok","timestamp":1565024928413,"user_tz":-120,"elapsed":1349,"user":{"displayName":"Dominic Zhao","photoUrl":"","userId":"13142109890950216893"}},"colab":{"base_uri":"https://localhost:8080/","height":405}},"source":["y[y=='b']=1\n","y[y=='s']=0\n","print(y[:20])\n","#tx was probably as float object instead of float64\n","y=y.astype(float)\n","tx=tx.astype(float)\n"],"execution_count":34,"outputs":[{"output_type":"stream","text":["0     0.0\n","1     1.0\n","2     1.0\n","3     1.0\n","4     1.0\n","5     1.0\n","6     0.0\n","7     0.0\n","8     1.0\n","9     0.0\n","10    1.0\n","11    1.0\n","12    1.0\n","13    1.0\n","14    1.0\n","15    0.0\n","16    1.0\n","17    0.0\n","18    1.0\n","19    1.0\n","Name: Prediction, dtype: float64\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/ops.py:1649: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n","  result = method(y)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"V9RnmKHbXUfN","colab_type":"code","colab":{}},"source":["losses=[]\n","w=np.random.rand(tx.shape[1])\n","print(w)\n","w=w.astype(float)\n","lambda_=0\n","gamma=0.000001\n","iterations=500\n","for i in range(iterations):\n","  print(\"iteration \",i+1)\n","  loss,w=logistic_learning_by_gradient_descent(y, tx, w, gamma)\n","  losses.append(loss)\n","losses.append(calculate_loss(y,tx,w))\n","print(losses)\n","plt.plot(range(iterations+1),losses)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HaThnpjZPnY-","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":67},"outputId":"c85c57b1-7891-4d91-a539-f9827836e763","executionInfo":{"status":"ok","timestamp":1565016447192,"user_tz":-120,"elapsed":747,"user":{"displayName":"Dominic Zhao","photoUrl":"","userId":"13142109890950216893"}}},"source":["print(tx.dot(w))\n","y_predictions=sigmoid(tx.dot(w))\n","print(y_predictions)\n"],"execution_count":78,"outputs":[{"output_type":"stream","text":["[ 0.86669617 -0.35258262  1.61103301 ...  0.86330517 -0.60376155\n","  1.77072873]\n","[0.70405777 0.41275628 0.83355476 ... 0.70335074 0.35348358 0.85454827]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"N2D38F1w6Gqr","colab_type":"code","outputId":"476f0567-a5b3-4144-cee8-4c94b38c90f8","executionInfo":{"status":"ok","timestamp":1565017670138,"user_tz":-120,"elapsed":3442,"user":{"displayName":"Dominic Zhao","photoUrl":"","userId":"13142109890950216893"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["\n","\n","predictions_boolean=[]\n","for pred in y_predictions:\n","  if pred>=(0.5):\n","    predictions_boolean.append(y[1])\n","  else:\n","    predictions_boolean.append(y[0])\n","hit=hit_mark(predictions_boolean,y)\n","\n","print(hit/len(predictions_boolean))"],"execution_count":85,"outputs":[{"output_type":"stream","text":["0.74974\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"aGUyaou8R2OL","colab_type":"text"},"source":["**As we can see, the prediction with logistic regression is pretty good with 75% correct prediction**"]},{"cell_type":"markdown","metadata":{"id":"WXeVWAOzXWNA","colab_type":"text"},"source":["We can now try cross validating to see how it performs on a test set"]},{"cell_type":"code","metadata":{"id":"dCI1bNSnXbtE","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":152},"outputId":"c0b73930-0dcb-436b-8e41-f765a3d5194a","executionInfo":{"status":"ok","timestamp":1565026735361,"user_tz":-120,"elapsed":196176,"user":{"displayName":"Dominic Zhao","photoUrl":"","userId":"13142109890950216893"}}},"source":["k_indices=build_k_indices(y,5,1)\n","gamma=0.000001\n","hit_mark_test,hit_mark_train=cross_validation_logistic(train,k_indices,gamma)\n","print(\" the hit mark for train and test respectively: \")\n","print(hit_mark_test)\n","print(hit_mark_train)"],"execution_count":44,"outputs":[{"output_type":"stream","text":["one fold\n","one fold\n","one fold\n","one fold\n","one fold\n"," the hit mark for train and test respectively: \n","0.749692\n","0.570937\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RhNatQyISAt4","colab_type":"text"},"source":[" **Now with penalized logistic regression**\n"]},{"cell_type":"code","metadata":{"id":"s4T37BgXlAVe","colab_type":"code","colab":{}},"source":["losses=[]\n","w=np.random.rand(tx.shape[1])\n","print(w)\n","w=w.astype(float)\n","lambda_=1\n","gamma=0.000001\n","iterations=100\n","for i in range(iterations):\n","  print(\"iteration \",i+1)\n","  loss,w=logistic_learning_by_gradient_descent_penalized(y, tx, w, gamma,lambda_)\n","  losses.append(loss)\n","losses.append(calculate_loss_penalized(y,tx,w))\n","print(losses)\n","plt.plot(range(iterations+1),losses)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QnBBI7hyTEtt","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":152},"outputId":"37e760dd-05bf-4bbe-b1e0-b35ef33eb6fc","executionInfo":{"status":"ok","timestamp":1565027007588,"user_tz":-120,"elapsed":198690,"user":{"displayName":"Dominic Zhao","photoUrl":"","userId":"13142109890950216893"}}},"source":["k_indices=build_k_indices(y,5,1)\n","gamma=0.000001\n","lambda_=1\n","hit_mark_test,hit_mark_train=cross_validation_logistic_penalized(train,k_indices,gamma,lambda_)\n","print(\" the hit mark for train and test respectively: \")\n","print(hit_mark_test)\n","print(hit_mark_train)"],"execution_count":47,"outputs":[{"output_type":"stream","text":["one fold\n","one fold\n","one fold\n","one fold\n","one fold\n"," the hit mark for train and test respectively: \n","0.7497079999999999\n","0.570937\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"R0fBFc4M3Z9j","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":247},"outputId":"eec6a342-af4a-44c9-a220-68bed749539f","executionInfo":{"status":"error","timestamp":1565030714580,"user_tz":-120,"elapsed":547,"user":{"displayName":"Dominic Zhao","photoUrl":"","userId":"13142109890950216893"}}},"source":[""],"execution_count":50,"outputs":[{"output_type":"stream","text":["DER_mass_MMC\n"],"name":"stdout"},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-50-ecae79b9dad5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0msquared\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mx_i\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrow\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0msquared\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_i\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m   \u001b[0maugmented\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msquared\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for ** or pow(): 'str' and 'int'"]}]},{"cell_type":"code","metadata":{"id":"ymuTxdYvGLv8","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}